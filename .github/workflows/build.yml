name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      NIKODAY_MONGODB_USERNAME: ${{ secrets.NIKODAY_MONGODB_USERNAME }} 
      NIKODAY_MONGODB_PASSWORD: ${{ secrets.NIKODAY_MONGODB_PASSWORD }} 
      NIKODAY_MONGODB_HOST: ${{ secrets.NIKODAY_MONGODB_HOST }} 
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
      - name: Debug
        run: echo ${{ env.BRANCH_NAME }}
      
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build and testing
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn install -B -V
      
      - name: SonaCloud analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      
      - name: Run Codecov analyze
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
      
      - name: Run Codacy analyze
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report
      
      #- name: Deploy Heroku
      #  uses: akhileshns/heroku-deploy@v3.6.8 # This is the action
      #  with:
      #    heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #    heroku_app_name: "${{ env.BRANCH_NAME }}-nikoday-backend"
      #    heroku_email: "leandro@frekele.org"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nikoday-backend
          IMAGE_TAG: ${{ env.BRANCH_NAME }}
          #IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ACCESS_ARG=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg SECRET_ARG=${{ secrets.AWS_SECRET_ACCESS_KEY }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-${{ env.BRANCH_NAME }}.json
          container-name: nikoday-backend-${{ env.BRANCH_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: nikoday-service-${{ env.BRANCH_NAME }}
          cluster: nikoday-cluster-${{ env.BRANCH_NAME }}
          wait-for-service-stability: true
